name: CI

on:
  push:
    paths:
      - 'docker-compose.yml'       
      - 'Database/**'      
      - 'Microservice/**'
      - 'docs/**'          
      - 'backend/**'
      - 'frontend/**'
      - '.github/workflows/ci.yml'
      - '.github/workflows/docker-deploy.yml'
  pull_request:
    paths:
      - 'docker-compose.yml'         
      - 'Database/**'       
      - 'Microservice/**'
      - 'docs/**'          
      - 'backend/**'
      - 'frontend/**'
      - '.github/workflows/ci.yml'
      - '.github/workflows/docker-deploy.yml'

jobs:
  backend:
    name: Backend (Spring Boot)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven (Skip Tests)
        run: mvn -B package -DskipTests

      - name: Run Unit Tests
        run: mvn -B test

  frontend:
    name: Frontend (React)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci || npm install

      - name: Lint (optional)
        run: npm run lint || echo "No lint script found"

      - name: Run Frontend Tests
        run: npx vitest run --reporter=verbose

      - name: Generate Test Coverage
        run: npx vitest run --coverage
        continue-on-error: true

      - name: Build Frontend
        run: npm run build

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: frontend-test-results
          path: |
            ./frontend/coverage/
            ./frontend/test-results/
          retention-days: 30

      - name: Upload Frontend Coverage
        uses: codecov/codecov-action@v4
        if: success()
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          directory: ./frontend

  python-components:
    name: Python Components
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./Microservice
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Verify test setup
        run: |
          python -c "import sys; print('Python path:', sys.path)"
          python -c "import api; print('API module imported successfully')"
          ls -la tests/

      - name: Set Python path and run tests
        run: |
          export PYTHONPATH="${PYTHONPATH}:$(pwd)/.."
          python -m pytest tests/ -v --cov=. --cov-report=term-missing --cov-report=xml --tb=short
        env:
          PYTHONPATH: ${{ github.workspace }}
        continue-on-error: false

      - name: Generate coverage report
        run: |
          python -m coverage report
          python -m coverage html
        if: always()
          
      - name: Upload coverage to Codecov (optional)
        uses: codecov/codecov-action@v4
        if: success()
        with:
          file: ./coverage.xml
          flags: microservice
          name: microservice-coverage