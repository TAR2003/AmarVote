name: Deploy to Azure VM in code

on:
  push:
    branches: [deployment]  # Changed to trigger only on deployment branch
  workflow_run:
    workflows: ["CI"]
    types:
      - completed



jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Debug file structure
        run: |
          echo "Current directory: $(pwd)"
          echo "Files in repository:"
          ls -R
          echo "Frontend contents:"
          ls -la frontend/
          echo "Backend contents:"
          ls -la backend/

      - name: Validate critical files
        run: |
          if [ ! -f "frontend/package.json" ]; then
            echo "::error::Missing frontend/package.json"
            echo "Frontend directory contents:"
            ls -la frontend/
            exit 1
          fi

          if [ ! -f "backend/pom.xml" ]; then
            echo "::error::Missing backend/pom.xml"
            echo "Backend directory contents:"
            ls -la backend/
            exit 1
          fi
          echo "All required files present"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up Docker Compose
        uses: docker/setup-compose-action@v1

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.AZURE_VM_SECRET }}

      - name: Add Azure VM to known hosts
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan -H ${{ secrets.AZURE_VM_HOST }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Debug SSH connection
        run: |
          echo "Testing SSH connection..."
          ssh -v -o StrictHostKeyChecking=no ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_HOST }} "echo 'SSH connection successful'"

      - name: Prepare VM directory
        run: |
          ssh -o StrictHostKeyChecking=no \
              ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_HOST }} \
              "sudo mkdir -p /home/${{ secrets.AZURE_VM_USERNAME }}/app && \
               sudo chown -R ${{ secrets.AZURE_VM_USERNAME }}:${{ secrets.AZURE_VM_USERNAME }} /home/${{ secrets.AZURE_VM_USERNAME }}/app && \
               sudo chmod -R 755 /home/${{ secrets.AZURE_VM_USERNAME }}/app"

      - name: Verify directory structure
        run: |
          ssh -o StrictHostKeyChecking=no \
              ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_HOST }} \
              "ls -la /home/${{ secrets.AZURE_VM_USERNAME }}/app"

      - name: Copy files to VM
        run: |
          rsync -avz --delete \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='backend/logs' \
            ./ ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_HOST }}:/home/${{ secrets.AZURE_VM_USERNAME }}/app/

      - name: Set up Docker context
        run: |
          docker context create azure-vm-${{ github.run_id }} --docker "host=ssh://${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_HOST }}"
          docker context use azure-vm-${{ github.run_id }}

      - name: Deploy with docker-compose
        run: |
          docker volume create maven_repo || true
          docker stop electionguard_service || true
          docker stop rag_service || true
          docker stop amarvote_backend || true
          docker stop amarvote_frontend || true
          docker stop amarvote_postgres || true
          docker rm amarvote_postgres || true
          docker rm electionguard_service || true
          docker rm rag_service || true
          docker rm amarvote_backend || true
          docker rm amarvote_frontend || true
          docker compose -f docker-compose.yml down --remove-orphans || true
          docker compose -f docker-compose.yml build
          docker compose -f docker-compose.yml up -d --force-recreate

      - name: Verify deployment
        run: |
          docker compose -f docker-compose.yml ps -a
          sleep 10
          curl -v http://${{ secrets.AZURE_VM_HOST }}

      - name: Clean up
        if: always()
        run: |
          docker context use default
          docker context rm azure-vm-${{ github.run_id }} || true