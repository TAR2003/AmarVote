name: Deploy to Azure VM

on:
  push:
    branches: [deployment]
  workflow_run:
    workflows: ["CI"]
    types:
      - completed

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Clean build caches
        run: |
          cd frontend && rm -rf node_modules/.cache
          cd ../backend && mvn dependency:purge-local-repository

      - name: Build frontend assets
        run: |
          cd frontend
          npm ci --production
          npm run build
        env:
          NODE_OPTIONS: --max-old-space-size=1024
          GENERATE_SOURCEMAP: "false"

      - name: Build backend
        run: |
          cd backend
          chmod +x mvnw
          ./mvnw clean package -DskipTests
        env:
          MAVEN_OPTS: -Xmx512m -Xms256m

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.AZURE_VM_SECRET }}

      - name: Add Azure VM to known hosts
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan -H ${{ secrets.AZURE_VM_HOST }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Check VM resources
        run: |
          ssh ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_HOST }} "free -m && df -h && docker system df"

      - name: Prepare VM directory
        run: |
          ssh ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_HOST }} \
            "sudo mkdir -p /home/${{ secrets.AZURE_VM_USERNAME }}/app && \
             sudo chown -R ${{ secrets.AZURE_VM_USERNAME }}:${{ secrets.AZURE_VM_USERNAME }} /home/${{ secrets.AZURE_VM_USERNAME }}/app"

      - name: Copy optimized files
        run: |
          rsync -avz --delete \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='backend/target' \
            --exclude='frontend/src' \
            --exclude='frontend/public' \
            ./ ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_HOST }}:/home/${{ secrets.AZURE_VM_USERNAME }}/app/

      - name: Configure swap space
        run: |
          ssh ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_HOST }} << 'EOF'
          if [ $(free -m | awk '/Swap/{print $2}') -lt 4096 ]; then
            sudo fallocate -l 2G /swapfile
            sudo chmod 600 /swapfile
            sudo mkswap /swapfile
            sudo swapon /swapfile
            echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab
          fi
          EOF

      - name: Deploy with docker-compose
        run: |
          docker context create azure-vm-${{ github.run_id }} --docker "host=ssh://${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_HOST }}"
          docker context use azure-vm-${{ github.run_id }}
          docker system prune -f
          docker compose -f docker-compose.prod.yml down --remove-orphans
          docker compose -f docker-compose.prod.yml build --memory 800m
          docker compose -f docker-compose.prod.yml up -d --force-recreate

      - name: Verify services
        run: |
          for i in {1..5}; do
            if ssh ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_HOST }} "docker ps --filter 'health=unhealthy' --format '{{.Names}}' | wc -l" | grep -q '0'; then
              echo "All services healthy"
              exit 0
            fi
            sleep 10
          done
          echo "::error::Some services failed to start healthy"
          exit 1

      - name: Clean up
        if: always()
        run: |
          docker context use default
          docker context rm azure-vm-${{ github.run_id }} || true