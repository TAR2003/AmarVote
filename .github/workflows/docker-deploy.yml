name: Deploy to Azure VM

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main' }}
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: src
      
      - name: Validate environment
        run: |
          cd src
          echo "Current directory: $(pwd)"
          echo "Repository structure:"
          ls -R
          
          # Required files check
          if [ ! -f "frontend/package.json" ]; then
            echo "::error::Missing frontend/package.json"
            ls -la frontend/
            exit 1
          fi
          
          if [ ! -f "backend/pom.xml" ]; then
            echo "::error::Missing backend/pom.xml"
            ls -la backend/
            exit 1
          fi
          
          if [ ! -f "frontend/nginx.conf" ]; then
            echo "::warning::nginx.conf not found in frontend/"
          fi

      - name: Set up Docker tools
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Set up Docker Compose
        uses: docker/setup-compose-action@v3

      - name: Configure SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.AZURE_VM_SECRET }}
      
      - name: Set up VM connection
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.AZURE_VM_HOST }} ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAI..." >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Prepare VM environment
        run: |
          ssh ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_HOST }} <<EOF
          sudo apt-get update
          sudo apt-get install -y docker.io docker-compose
          sudo usermod -aG docker $USER
          mkdir -p /home/$USER/app
          chmod -R 755 /home/$USER/app
          EOF

      - name: Transfer application files
        run: |
          cd src
          rsync -avz --progress --delete \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='.idea' \
            --rsync-path="sudo rsync" \
            ./ ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_HOST }}:/home/${{ secrets.AZURE_VM_USERNAME }}/app/

      - name: Set up remote Docker context
        run: |
          docker context create azure-vm-${{ github.run_id }} \
            --docker "host=ssh://${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_HOST }}"
          docker context use azure-vm-${{ github.run_id }}
      
      - name: Deploy application stack
        run: |
          docker compose -f docker-compose.yml down --remove-orphans --timeout 30 || true
          docker compose -f docker-compose.yml build --no-cache --pull
          docker compose -f docker-compose.yml up -d --force-recreate
          docker compose -f docker-compose.yml ps -a

      - name: Verify services
        run: |
          # Wait for services to initialize
          sleep 15
          
          # Frontend health check
          curl -v --retry 3 --retry-delay 5 \
            http://${{ secrets.AZURE_VM_HOST }} \
            || (docker compose logs frontend && exit 1)
            
          # Backend health check
          curl -v --retry 3 --retry-delay 5 \
            http://${{ secrets.AZURE_VM_HOST }}:8080/actuator/health \
            || (docker compose logs backend && exit 1)
            
          # ElectionGuard health check
          curl -v --retry 3 --retry-delay 5 \
            http://${{ secrets.AZURE_VM_HOST }}:5000/health \
            || (docker compose logs electionguard && exit 1)

      - name: Clean up resources
        if: always()
        run: |
          docker context use default
          docker context rm azure-vm-${{ github.run_id }} || true