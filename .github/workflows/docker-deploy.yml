name: Deploy to Azure VM

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Debug file structure
        run: |
          echo "Current directory: $(pwd)"
          echo "Files in repository:"
          ls -R
          echo "Frontend contents:"
          ls -la frontend/
          echo "Backend contents:"
          ls -la backend/

      - name: Validate critical files
        run: |
          if [ ! -f "frontend/package.json" ]; then
            echo "::error::Missing frontend/package.json"
            ls -la frontend/
            exit 1
          fi
          
          if [ ! -f "backend/pom.xml" ]; then
            echo "::error::Missing backend/pom.xml"
            ls -la backend/
            exit 1
          fi
          echo "All required files present"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up Docker Compose
        uses: docker/setup-compose-action@v1

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.AZURE_VM_SECRET }}

      - name: Configure SSH
        run: |
          SSH_DIR="/home/runner/.ssh"
          mkdir -p $SSH_DIR
          chmod 700 $SSH_DIR
          ssh-keyscan -H ${{ secrets.AZURE_VM_HOST }} >> $SSH_DIR/known_hosts
          chmod 600 $SSH_DIR/known_hosts
          echo "SSH configuration complete"

      - name: Test VM connection
        run: |
          ssh -v -o StrictHostKeyChecking=no \
            ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_HOST }} \
            "echo 'SSH connection successful'"

      - name: Prepare VM directory
        run: |
          ssh ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_HOST }} \
            "rm -rf ~/app && \
             mkdir -p ~/app && \
             chmod -R 755 ~/app"

      - name: Copy files to VM
        run: |
          rsync -avz --delete \
            -e "ssh -o StrictHostKeyChecking=no" \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='.github' \
            ./ ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_HOST }}:~/app/

      - name: Install Docker Compose on VM (if needed)
        run: |
          ssh ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_HOST }} \
            "command -v docker-compose &>/dev/null || \
             sudo curl -L \"https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)\" \
             -o /usr/local/bin/docker-compose && \
             sudo chmod +x /usr/local/bin/docker-compose"

      - name: Deploy application
        run: |
          ssh ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_HOST }} \
            "cd ~/app && \
             docker-compose -f docker-compose.yml down --remove-orphans || true && \
             docker-compose -f docker-compose.yml build --no-cache && \
             docker-compose -f docker-compose.yml up -d --force-recreate"

      - name: Verify deployment
        run: |
          ssh ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_HOST }} \
            "docker ps -a && \
             docker-compose -f ~/app/docker-compose.yml ps -a"
          
          echo "Waiting for services to start..."
          sleep 20
          
          echo "Testing frontend:"
          curl -v http://${{ secrets.AZURE_VM_HOST }} || true
          
          echo "Testing backend health:"
          curl -v http://${{ secrets.AZURE_VM_HOST }}:8080/actuator/health || true